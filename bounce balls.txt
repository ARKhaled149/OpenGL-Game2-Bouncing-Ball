#include <math.h>
#include <stdio.h>
#include <windows.h>
#include <string.h>
#include <iostream>
#include <MMSystem.h>
using namespace std;
#include <cmath>
#include <glut.h>
//colors
GLfloat white[] = { 1,1,1 };
GLfloat red[] = { 1,0,0 };
GLfloat green[] = { 0,1,0 };
GLfloat blue[] = { 0,0,1 };
GLfloat turquoise[] = { 0.1,1,0.8 };

class Camera {
	double theta;
	double y;
	double dtheta;
	double dy;

public:
	Camera() : theta(0), y(3), dtheta(0.04), dy(0.2) {}
	double getx() {
		return (10 * cos(theta));
	}
	double gety() {
		return y;
	}
	double getz() {
		return( 10 * sin(theta));
	}
	void moveright() {
		theta = theta + dtheta;
	}
	void moveleft() {
		theta = theta - dtheta;
	}
	void moveup() {
		y = y + dy;
	}
	void movedown() {
		if (y > dy) {
			y = y - dy;
		}
	}
};
class Ball {
	double radius;
	GLfloat* color;
	double maxh;
	double x;
	double y;
	double z;
	int direction;
public:
	Ball(double r, GLfloat* c, double h, double x, double z) :
		radius(r), color(c), maxh(h), direction(-1), y(h), x(x), z(z) {

	}
	void update() {
		y = y + direction * 0.05;
		if (y > maxh) {
			y = maxh;
			direction = -1;
		}
		else if (y < radius) {
			y = radius;
			direction = 1;
		}
		glPushMatrix();
		glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, color);
		glTranslated(x, y, z);
		glutSolidSphere(radius, 30, 30);
		glPopMatrix();
	}
};
class Checkboard {
	int displaylistid;
	int width;
	int depth;
public:
	Checkboard(int width, int depth) :width(width), depth(depth) {}
	double centerx() {
		return width / 2;
	}
	double centerz() {
		return depth / 2;
	}
	void create() {
		displaylistid = glGenLists(1);
		glNewList(displaylistid, GL_COMPILE);
		glBegin(GL_QUADS);
		glNormal3d(0, 1, 0);
		for (int x = 0; x < width - 1; x++) {
			for (int z = 0; z < depth - 1; z++) {
				glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, (x + z) % 2 == 0 ? red : blue);
				glVertex3f(x, 0, z);
				glVertex3f(x + 1, 0, z);
				glVertex3f(x + 1, 0, z + 1);
				glVertex3f(x , 0, z + 1);
			}
		}
		glEnd();
		glEndList();
	}
	void draw() {
		glCallList(displaylistid);
	}
};
Checkboard checkboard(8, 8);
Camera camera;
Ball balls[]{
	Ball(1,green,7,6,1),
	Ball(1.5, red, 6, 3, 4),
	Ball(0.4, blue, 5, 1, 7)

};
void Display(void) {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	gluLookAt(camera.getx(), camera.gety(), camera.getz(), checkboard.centerx(), 0.0, checkboard.centerz(), 0.0, 1.0, 0.0);
	checkboard.draw();
	for (int i = 0; i < sizeof balls / sizeof(Ball); i++){
		balls[i].update();
	}
	glFlush();
	glutSwapBuffers();
}
void reshape(GLint w , GLint h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(40.0f, GLfloat(w) / GLfloat(h), 1.0f, 150.0f);
	glMatrixMode(GL_MODELVIEW);
}
void timer(int v) {
	glutPostRedisplay();
	glutTimerFunc(1000 / 60, timer, v);
}
void special(int key, int, int) {
	switch (key) {
	case GLUT_KEY_LEFT:camera.moveleft(); break;
	case GLUT_KEY_RIGHT:camera.moveright(); break;
	case GLUT_KEY_UP:camera.moveup(); break;
	case GLUT_KEY_DOWN:camera.movedown(); break;
	}
	glutPostRedisplay();
}
void key(unsigned char key, int x, int y) {
	switch (key) {
	case 'a':camera.moveleft(); break;
	case 'd':camera.moveright(); break;
	case 'w':camera.moveup(); break;
	case 's':camera.movedown(); break;
	case 'q': exit(0);
	}
	glutPostRedisplay();
}
void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowPosition(80, 80);
	glutInitWindowSize(800, 600);
	glutCreateWindow("OpenGL - 3D Template");
	glutDisplayFunc(Display);
	glutReshapeFunc(reshape);
	glutSpecialFunc(special);
	glutTimerFunc(1000 / 60, timer, 0);
	glutKeyboardFunc(key);
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glEnable(GL_DEPTH_TEST);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white);
	glMaterialfv(GL_FRONT, GL_SPECULAR, white);
	glMaterialf(GL_FRONT, GL_SHININESS, 30);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	checkboard.create();
	sndPlaySound(TEXT("axero.wav"), SND_LOOP | SND_ASYNC);
	glutMainLoop();
}

